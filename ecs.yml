Parameters:
  ALBName:
    Type: String
  ImageId:
    Type: String
    Description: Place imageid
  VpcId:
    Type: String
    Description: >
      Optional - Specifies the ID of an existing VPC in which to launch
      your container instances. If you specify a VPC ID, you must specify a list of
      existing subnets in that VPC. If you do not specify a VPC ID, a new VPC is created
      with atleast 1 subnet.
    Default: ''
    ConstraintDescription: >
      VPC Id must begin with 'vpc-' or leave blank to have a
      new VPC created
  CodeDeploySVCRole:
      Description: Arn of CodeDeploy
      Type: String
      Default: arn:aws:iam::558443770462:role/codedeploy-blue-green
  ECSApplicationName:
      Description: Give ECS application name
      Type: String
  VpcCidr:
    Type: String
    Description: Optional - Specifies the CIDR Block of VPC
    Default: ''
  SubnetCidr1:
    Type: String
    Description: Specifies the CIDR Block of Subnet 1
    Default: ''
  SubnetCidr2:
    Type: String
    Description: Specifies the CIDR Block of Subnet 2
    Default: ''
  SubnetCidr3:
    Type: String
    Description: Specifies the CIDR Block of Subnet 3
    Default: ''
  EcsAmiId:
    Type: String
    Description: Type Ec2 image
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select Key-pair
  SecurityIngressFromPort:
    Type: CommaDelimitedList
    Description: Type in commas give two ports
    Default: '0'
  SecurityIngressToPort:
    Type: CommaDelimitedList
    Description: Type in commas give two ports  
    Default: '65535'
  SecurityIngressCidrIp:
    Type: String
    Description: >
      Optional - Specifies the CIDR/IP range for Security Ports - defaults
      to 0.0.0.0/0
    Default: 0.0.0.0/0
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: >
      Specifies a comma-separated list of 3 VPC Availability Zones for
      the creation of new subnets. These zones must have the available status.
Conditions: 
  CreateNewVpc:
    !Equals [!Ref VpcId, '']
  CreateSubnet1: !And
    - !Not [!Equals [!Ref SubnetCidr1, '']]
    - !Condition CreateNewVpc
  CreateSubnet2: !And
    - !Not [!Equals [!Ref SubnetCidr2, '']]
    - !Condition CreateSubnet1
  CreateSubnet3: !And
    - !Not [!Equals [!Ref SubnetCidr3, '']]
    - !Condition CreateSubnet2
Resources:
  Vpc:
    Condition: CreateSubnet1
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PubSubnetAz1:
    Condition: CreateSubnet1
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr1
      AvailabilityZone: !Select [ 0, !Ref VpcAvailabilityZones ]
      MapPublicIpOnLaunch: true
  PubSubnetAz2:
    Condition: CreateSubnet2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr2
      AvailabilityZone: !Select [ 1, !Ref VpcAvailabilityZones ]
      MapPublicIpOnLaunch: true
  PubSubnetAz3:
    Condition: CreateSubnet3
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr3
      AvailabilityZone: !Select [ 2, !Ref VpcAvailabilityZones ]
      MapPublicIpOnLaunch: true
  InternetGateway:
    Condition: CreateSubnet1
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Condition: CreateSubnet1
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteViaIgw:
    Condition: CreateSubnet1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRouteViaIgw:
    Condition: CreateSubnet1
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PubSubnet1RouteTableAssociation:
    Condition: CreateSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Condition: CreateSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw
  PubSubnet3RouteTableAssociation:
    Condition: CreateSubnet3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz3
      RouteTableId: !Ref RouteViaIgw 
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Testing
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !If [ CreateSubnet1, !Ref Vpc, !Ref VpcId ]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Select [ 0, !Ref SecurityIngressFromPort ]
        ToPort: !Select [ 0, !Ref SecurityIngressToPort ]
        CidrIp: !Ref SecurityIngressCidrIp
      - IpProtocol: tcp
        FromPort: !Select [ 1, !Ref SecurityIngressFromPort ]
        ToPort: !Select [ 1, !Ref  SecurityIngressToPort ]
        CidrIp: !Ref SecurityIngressCidrIp
  EcsAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
        - !Ref PubSubnetAz3
      LaunchConfigurationName: !Ref ContainerInstance
      DesiredCapacity: 2
      MinSize: 1
      MaxSize: 3
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoscalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstance:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      SecurityGroups:
       - !Ref EcsSecurityGroup
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "==========================="
          whoami
          sudo amazon-linux-extras install -y ecs
          systemctl enable --now --no-block ecs.service 
          sudo su && echo ECS_CLUSTER=Testing >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsAutoscalingGroup --region ${AWS::Region}
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Ref ALBName
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref EcsSecurityGroup
      Subnets: 
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
        - !Ref PubSubnetAz3
      Type: application
  Test1TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            Name: test-tg-1
            VpcId: !Ref Vpc 
            Port: 80
            Protocol: HTTP
  Test2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            Name: test-tg-2
            VpcId: !Ref Vpc 
            Port: 80
            Protocol: HTTP
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Test1TargetGroup
    # DependsOn: ApplicationLoadBalancer
  AutoscalingRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
        Path: /
        Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'application-autoscaling:*'
                - 'cloudwatch:DescribeAlarms'
                - 'cloudwatch:PutMetricAlarm'
                - 'ecs:DescribeServices'
                - 'ecs:UpdateService'
              Resource: '*'      
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'         
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
            Resource: '*'










  TaskDefinition:
          Type: AWS::ECS::TaskDefinition
          # Makes sure the log group is created before it is used.
          DependsOn: LogGroup
          Properties:
            # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
            #Family: !Join ['', [!Ref test-svc, TaskDefinition]]
            # awsvpc is required for Fargate
            NetworkMode: bridge
            # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
            # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
            # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
            # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
            # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
            Cpu: .25 vCPU
            # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
            # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
            # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
            # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
            # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
            Memory: 0.5GB
            # A role needed by ECS.
            # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
            # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
            ExecutionRoleArn: !Ref ExecutionRole
            # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
            TaskRoleArn: !Ref TaskRole
            ContainerDefinitions:
              - Name: cfn-test
                Image: 558443770462.dkr.ecr.us-east-2.amazonaws.com/web
                PortMappings:
                  - ContainerPort: 8082
                    HostPort: 8082
                # Send logs to CloudWatch Logs
                LogConfiguration:
                  LogDriver: awslogs
                  Options:
                    awslogs-region: !Ref AWS::Region
                    awslogs-group: !Ref LogGroup
                    awslogs-stream-prefix: ecs
  LogGroup:
          Type: AWS::Logs::LogGroup
          Properties:
            LogGroupName: test-log-group

  TaskRole:
          Type: AWS::IAM::Role
          Properties:
            RoleName: task-role-for-ecs
            AssumeRolePolicyDocument:
              Statement:
                - Effect: Allow
                  Principal:
                    Service: ecs-tasks.amazonaws.com
                  Action: 'sts:AssumeRole'
  ExecutionRole:
          Type: AWS::IAM::Role
          Properties:
            RoleName: role-need-for-container
            AssumeRolePolicyDocument:
              Statement:
                - Effect: Allow
                  Principal:
                    Service: ecs-tasks.amazonaws.com
                  Action: 'sts:AssumeRole'
            ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      DeploymentController: 
          Type: CODE_DEPLOY
      # HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName: cfn-test
          ContainerPort: 8082
          TargetGroupArn: !Ref Test1TargetGroup
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
        - Type: spread
          Field: instanceId
      TaskDefinition: !Ref TaskDefinition
      ServiceName: test-svc
      Role: !Ref ECSServiceRole
    DependsOn: 
      - ApplicationLoadBalancer
      - LoadBalancerListener

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: for-ecs-service-role
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
  
  
  
  
  ECSApplication:
      Type: AWS::CodeDeploy::Application
      Properties:
          ApplicationName: !Ref ECSApplicationName
          ComputePlatform: ECS
  

  DeploymentGroup:
      Type: AWS::CodeDeploy::DeploymentGroup
      Properties: 
        ApplicationName: !Ref ECSApplicationName
        AutoRollbackConfiguration: 
          Enabled: true
          Events:
            - DEPLOYMENT_FAILURE
        BlueGreenDeploymentConfiguration: 
          DeploymentReadyOption: 
            ActionOnTimeout: CONTINUE_DEPLOYMENT
            WaitTimeInMinutes: 0
          TerminateBlueInstancesOnDeploymentSuccess:
            Action: TERMINATE
            TerminationWaitTimeInMinutes: 5
        DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
        DeploymentGroupName: test-deploy-group
        DeploymentStyle: 
          DeploymentOption: WITH_TRAFFIC_CONTROL
          DeploymentType: BLUE_GREEN
        LoadBalancerInfo: 
          TargetGroupPairInfo: 
            TargetGroups:
              - Name: test-tg-1
              - Name: test-tg-2
            ProdTrafficRoute: 
              ListenerArns: !Ref LoadBalancerListener
        ServiceRoleArn: !Ref CodeDeploySVCRole
        ECSServices:
          - ServiceName: test-svc
          - ClusterName: Testing
    

